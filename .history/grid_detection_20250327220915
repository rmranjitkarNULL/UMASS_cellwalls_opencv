import cv2
import numpy as np

def detect_grid_walls(image_path):
    # Read the image
    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    
    if img is None:
        print(f"Error: Could not read image {image_path}")
        return None
    
    # Preprocessing
    # Apply gentle blur to reduce noise without losing edge information
    blurred = cv2.GaussianBlur(img, (3, 3), 0)
    
    # Use Canny edge detection with carefully tuned parameters
    edges = cv2.Canny(
        blurred, 
        threshold1=30,   # Lower threshold
        threshold2=90,   # Higher threshold
        apertureSize=3   # Sobel kernel size
    )
    
    # Probabilistic Hough Transform with strict parameters
    lines = cv2.HoughLinesP(
        edges,
        rho=1,           # Distance resolution
        theta=np.pi/180, # Angle resolution
        threshold=30,    # Minimum intersection points to detect a line
        minLineLength=20,# Minimum line length
        maxLineGap=5     # Maximum allowed gap between line segments
    )
    
    # Create a color image to draw lines on
    color_img = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
    
    # Filter and draw lines
    if lines is not None:
        # Filter lines based on orientation and length
        vertical_lines = []
        horizontal_lines = []
        
        for line in lines:
            x1, y1, x2, y2 = line[0]
            
            # Calculate line length and angle
            length = np.sqrt((x2 - x1)**2 + (y2 - y1)**2)
            angle = np.abs(np.arctan2(y2 - y1, x2 - x1) * 180 / np.pi)
            
            # Vertical lines (close to 90 degrees)
            if 80 < angle < 100 and length > 20:
                vertical_lines.append(line[0])
            
            # Horizontal lines (close to 0 or 180 degrees)
            elif (angle < 10 or angle > 170) and length > 20:
                horizontal_lines.append(line[0])
        
        # Draw filtered lines
        for line in vertical_lines + horizontal_lines:
            x1, y1, x2, y2 = line
            cv2.line(color_img, (x1, y1), (x2, y2), (0, 255, 0), 1)
    
    return color_img, edges

def process_and_show_steps(image_path):
    # Perform detection
    color_result, edges = detect_grid_walls(image_path)
    
    # Create a combined view
    combined = np.hstack([
        color_result  # Lines detected
    ])
    
    # Resize for better viewing
    scale_factor = 0.5
    resized = cv2.resize(combined, None, fx=scale_factor, fy=scale_factor)
    
    return resized

# Example usage (commented out as we can't actually run it)
image_paths = ['social.png']
for path in image_paths:
    result = process_and_show_steps(path)
    cv2.imshow(f'Grid Detection Steps - {path}', result)
    cv2.waitKey(0)
    cv2.destroyAllWindows()